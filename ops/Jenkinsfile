pipeline {
    agent {
        // Use a Docker agent that includes Docker CLI and Compose v2
        docker {
            image 'docker:latest' // This image contains docker CLI and compose plugin
            // Mount the host's Docker socket into the agent container
            args '-v /var/run/docker.sock:/var/run/docker.sock -u root' // Added -u root
            // Ensure the user inside the container can access the socket (might be needed depending on host setup)
            // args '-v /var/run/docker.sock:/var/run/docker.sock -u root' 
        }
    }

    environment {
        DOCKER_CREDS = credentials('docker-hub-creds')
    }

    stages {
        stage('Build and run dev') {
            steps {
                echo "Branch: ${GIT_BRANCH}    Commit: ${GIT_COMMIT}"
                echo "Jenkins node: ${NODE_NAME}    Build tag: ${BUILD_TAG}"
                echo "Jenkins workspace: ${WORKSPACE}"
                
                // Debugging steps: Check docker command availability and version
                sh 'echo "--- Checking Docker Info ---"'
                sh 'which docker'
                sh 'docker --version'
                sh 'docker compose version' 
                sh 'echo "--- End Checking Docker Info ---"'

                dir("./env-dev") {
                    // Build and start dev
                    sh 'docker compose -f docker-compose.dev.yml up -d --build' // Use 'docker compose'
                }
            }
        }
        stage('Unit tests') {
            steps {
                // run Jest tests
                sh 'docker exec supspace-client npm test'
            }
            post { // clean-up dev
                always {
                    dir("./env-dev") {
                        sh 'docker compose -f docker-compose.dev.yml down'
                        sh 'docker rmi supspace-client'
                        sh 'docker rmi supspace-api'
                    }
                }
            }
        }
        stage('Build and run staging') {
            steps {
                dir("./env-dev") {
                    // Write .env.staging from Jenkins environment variables
                    sh '''
                    cat > .env.staging <<EOF
                    MONGO_INITDB_ROOT_USERNAME=$MONGO_INITDB_ROOT_USERNAME
                    MONGO_INITDB_ROOT_PASSWORD=$MONGO_INITDB_ROOT_PASSWORD
                    JWT_SECRET=$JWT_SECRET
                    JWT_EXPIRE=$JWT_EXPIRE
                    SMTP_USERNAME=$SMTP_USERNAME
                    SMTP_PASSWORD=$SMTP_PASSWORD
                    GOOGLE_CLIENT_ID=$GOOGLE_CLIENT_ID
                    GOOGLE_CLIENT_SECRET=$GOOGLE_CLIENT_SECRET
                    EOF
                    '''
                    sh 'docker compose -f docker-compose.staging.yml --env-file .env.staging up -d --build'
                }
            }
        }
        stage('Integration tests') {
            steps {
                // Add delay to allow services to potentially stabilize
                sh 'echo "Waiting a bit for services to start..."'
                sh 'sleep 15' // Wait 15 seconds

                // Check API logs using docker compose logs within the correct directory
                dir("./env-dev") {
                    sh 'echo "--- Listing files in env-dev ---"'
                    sh 'ls -la' // Add this line to list files
                    sh 'echo "--- Checking enetspace-api logs ---"'
                    // Use docker compose logs <service_name>
                    sh 'docker compose -f docker-compose.staging.yml logs enetspace-api'
                    sh 'echo "--- End API logs ---"'
                }

                // Confirm file exists and has execute permissions
                sh 'ls -la ops/tests/integration.sh'
                sh 'chmod +x ./ops/tests/integration.sh'

                // Try executing with sh explicitly
                sh 'echo "--- Attempting execution with explicit sh ---"'
                sh 'sh ./ops/tests/integration.sh'
            }
            post {
                always {
                    // Stop staging environment 
                    dir("./env-dev") {
                        sh 'docker compose -f docker-compose.staging.yml down'
                    }
                }
                failure {
                    // // If tests fail, remove failed staging images
                    sh 'docker rmi supspace-client'
                    sh 'docker rmi supspace-api'
                }
            }
        }
        stage('Push images to Registry') {
            steps {
                // tag images
                sh "docker image tag supspace-client edamh158/supspace-client:${GIT_COMMIT}"
                sh "docker image tag supspace-api edamh158/supspace-api:${GIT_COMMIT}"
                sh "docker image tag nginx:alpine edamh158/supspace-nginx:${GIT_COMMIT}"
                // Login to Docker Hub
                sh "echo \$DOCKER_CREDS_PSW | docker login -u \$DOCKER_CREDS_USR --password-stdin"
                // push images
                sh "docker push edamh158/supspace-client:${GIT_COMMIT}"
                sh "docker push edamh158/supspace-api:${GIT_COMMIT}"
                sh "docker push edamh158/supspace-nginx:${GIT_COMMIT}"
            }
            post {
                always {
                    // remove local images
                    sh "docker rmi edamh158/supspace-client:${GIT_COMMIT}"
                    sh "docker rmi edamh158/supspace-api:${GIT_COMMIT}"
                    sh "docker rmi edamh158/supspace-nginx:${GIT_COMMIT}"
                    sh "docker rmi supspace-client"
                    sh "docker rmi supspace-api"
                    sh "docker rmi mongo:4.4.17-focal"
                    sh "docker rmi nginx:alpine"
                }
            }
        }
        stage('Deploy to prod') {
            when {
                branch 'main'
            }
            steps {
                dir("./env-dev") {
                    sh "echo \$DOCKER_CREDS_PSW | docker login -u \$DOCKER_CREDS_USR --password-stdin"
                     // Rolling update to production (waits for update to finish)
                    sh 'docker service update --image edamh158/supspace-client:${GIT_COMMIT} prod_supspace-client'
                    sh 'docker service update --image edamh158/supspace-api:${GIT_COMMIT} prod_supspace-api'
                    sh 'docker service update --image edamh158/supspace-nginx:${GIT_COMMIT} prod_nginx'
                }
            }
        }
        stage('Smoke tests and roll-back if needed') {
            when {
                branch 'main'
            }
            steps {
                sh "curl 'http://prod_nginx:80'"
            }
            post {
                failure {
                    sh "docker service rollback prod_supspace-client"
                    sh "docker service rollback prod_supspace-api"
                    sh "docker service rollback prod_nginx"
                }
            }
        }
    }
}