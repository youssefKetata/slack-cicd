pipeline {
    agent {
        // Use a Docker agent that includes Docker CLI and Compose v2
        docker {
            image 'docker:latest' // This image contains docker CLI and compose plugin
            // Mount the host's Docker socket into the agent container
            args '-v /var/run/docker.sock:/var/run/docker.sock -u root' // Added -u root
            // Ensure the user inside the container can access the socket (might be needed depending on host setup)
            // args '-v /var/run/docker.sock:/var/run/docker.sock -u root' 
        }
    }

    environment {
        DOCKER_CREDS = credentials('docker-hub-creds')
        MONGO_INITDB_ROOT_USERNAME = credentials('mongo-root-username-id') 
        MONGO_INITDB_ROOT_PASSWORD = credentials('mongo-root-password-id') 
        JWT_SECRET = credentials('jwt-secret-id')       
        JWT_EXPIRE = credentials('jwt-expire-id')       
        SMTP_USERNAME = credentials('smtp-username-id')         
        SMTP_PASSWORD = credentials('smtp-password-id')         
        GOOGLE_ID = credentials('google-client-id-id')      
        GOOGLE_SECRET = credentials('google-client-secret-id') 
    }
    

    stages {
        stage('Build and run dev') {
            steps {
                echo "Branch: ${GIT_BRANCH}    Commit: ${GIT_COMMIT}"
                echo "Jenkins node: ${NODE_NAME}    Build tag: ${BUILD_TAG}"
                echo "Jenkins workspace: ${WORKSPACE}"
                
                // Debugging steps: Check docker command availability and version
                sh 'echo "--- Checking Docker Info ---"'
                sh 'which docker'
                sh 'docker --version'
                sh 'docker compose version' 
                sh 'echo "--- End Checking Docker Info ---"'

                dir("./env-dev") {
                    // Build and start dev
                    sh 'docker compose -f docker-compose.dev.yml up -d --build' // Use 'docker compose'
                }
            }
        }
        stage('Unit tests') {
            steps {
                // run Jest tests
                sh 'docker exec enetspace-client npm test'
            }
            post { // clean-up dev
                always {
                    dir("./env-dev") {
                        sh 'docker compose -f docker-compose.dev.yml down'
                        sh 'docker rmi enetspace-client'
                        sh 'docker rmi enetspace-api'
                    }
                }
            }
        }
        stage('Build and run staging') {
            steps {
                dir("./env-dev") {
                    // Write .env.staging from Jenkins environment variables (populated by credentials)
                    sh '''#!/bin/sh
                    # Use Jenkins-provided environment variables
                    cat > .env.staging <<EOF
                    MONGO_INITDB_ROOT_USERNAME=${MONGO_USER}
                    MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASS}
                    JWT_SECRET=${JWT_SECRET_VAL}
                    JWT_EXPIRE=${JWT_EXPIRE_VAL}
                    SMTP_USERNAME=${SMTP_USER}
                    SMTP_PASSWORD=${SMTP_PASS}
                    GOOGLE_CLIENT_ID=${GOOGLE_ID}
                    GOOGLE_CLIENT_SECRET=${GOOGLE_SECRET}
                    EOF
                    '''
                    // Use the generated .env.staging file
                    sh 'docker compose -f docker-compose.staging.yml --env-file .env.staging up -d --build'
                }
            }
        }
        stage('Integration tests') {
            steps {


                // Check API logs using docker compose logs within the correct directory
                dir("./env-dev") {
                    sh 'docker compose -f docker-compose.staging.yml ps'
                    sh 'docker compose -f docker-compose.staging.yml logs enetspace-api'
                    sh 'docker compose -f docker-compose.staging.yml logs nginx'
                }

                // Confirm file exists and has execute permissions
                sh 'ls -la ops/tests/integration.sh'
                sh 'chmod +x ./ops/tests/integration.sh'

                // Try executing with sh explicitly
                sh 'echo "--- Attempting execution with explicit sh ---"'
                sh 'sh ./ops/tests/integration.sh'
            }
            post {
                always {
                    // Stop staging environment 
                    dir("./env-dev") {
                        sh 'docker compose -f docker-compose.staging.yml down'
                    }
                }
                failure {
                    // // If tests fail, remove failed staging images
                    sh 'docker rmi enetspace-client'
                    sh 'docker rmi enetspace-api'
                }
            }
        }
        stage('Push images to Registry') {
            steps {
                // tag images
                sh "docker image tag enetspace-client youssef37/enetspace-client:${GIT_COMMIT}"
                sh "docker image tag enetspace-api youssef37/enetspace-api:${GIT_COMMIT}"
                sh "docker image tag env-dev-nginx youssef37/enetspace-nginx:${GIT_COMMIT}"
                // Login to Docker Hub
                sh "echo \$DOCKER_CREDS_PSW | docker login -u \$DOCKER_CREDS_USR --password-stdin"
                // push images
                sh "docker push youssef37/enetspace-client:${GIT_COMMIT}"
                sh "docker push youssef37/enetspace-api:${GIT_COMMIT}"
                sh "docker push youssef37/enetspace-nginx:${GIT_COMMIT}"
            }
            post {
                always {
                    // remove local images tagged with the commit hash
                    sh "docker rmi youssef37/enetspace-client:${GIT_COMMIT}"
                    sh "docker rmi youssef37/enetspace-api:${GIT_COMMIT}"
                    sh "docker rmi youssef37/enetspace-nginx:${GIT_COMMIT}"
                    
                    // Comment out removal of build images to avoid conflicts
                    // sh "docker rmi enetspace-client"
                    // sh "docker rmi enetspace-api"
                    // sh "docker rmi env-dev-nginx"
                    
                    // Comment out or remove attempts to delete base images
                    // sh "docker rmi mongo:4.4.17-focal" 
                    // sh "docker rmi nginx:alpine"
                }
            }
        }
        stage('Deploy to prod') {
            when {
                branch 'main'
            }
            steps {
                dir("./env-dev") {
                    sh "echo \$DOCKER_CREDS_PSW | docker login -u \$DOCKER_CREDS_USR --password-stdin"
                     // Rolling update to production (waits for update to finish)
                    sh 'docker service update --image youssef37/enetspace-client:${GIT_COMMIT} prod_enetspace-client'
                    sh 'docker service update --image youssef37/enetspace-api:${GIT_COMMIT} prod_enetspace-api'
                    sh 'docker service update --image youssef37/enetspace-nginx:${GIT_COMMIT} prod_nginx'
                }
            }
        }
        stage('Smoke tests and roll-back if needed') {
            when {
                branch 'main'
            }
            steps {
                // Install curl within the docker agent
                sh 'apk update && apk add curl' 
                
                sh 'echo "Waiting a few seconds before smoke test..."'
                sh 'sleep 10' 

                // --- !!! IMPORTANT !!! ---
                // Replace YOUR_SWARM_NODE_PUBLIC_IP with the actual IP address
                // Replace 80 if your service publishes a different external port
                sh "curl --fail --silent --show-error 'http://host.docker.internal:80'" 
            }
            post {
                failure {
                    echo "Smoke test failed! Rolling back services."
                    sh "docker service rollback prod_enetspace-client"
                    sh "docker service rollback prod_enetspace-api"
                    sh "docker service rollback prod_nginx"
                }
                success {
                    echo "Smoke test passed. Deployment successful."
                }
            }
        }
    }
}